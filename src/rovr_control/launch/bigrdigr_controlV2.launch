<?xml version="1.0" encoding="UTF-8"?> 
<!-- Launch all core rovr functions.
     This needs to be called regardless of whether using actual robot
     or gazebo simulation. The interface is the same, as below. 
     This does the following:
        Load robot model; (Pub tfs)
        Load robot controllers; (cmd_vel -> wheel/joint torques/vels)
        Sub to sensors -> Pub localization; (localization)
        Sub to goal -> Pub cmd_vel; (navigation)
        Launch any tertiary common functionality not in other launchs.
     This does not (explicitly):
        Control the wheels/joints (gazebo/hw controller)
        Load/publish sensors (gazebo/bd_bringup)
        Perform any other control of joints/goals (statemachine, teleop, etc)
        Do communication (teleop/feedback)
     Interface:
       Sub: (See configs)
        imu0/data (sensor_msgs/Imu)
        imu1/data (sensor_msgs/Imu)
        odometry/wheel (nav_msgs/Odometry)
        decawave0/odom (nav_msgs/Odometry)
        decawave1/odom (nav_msgs/Odometry)
        odometry/fiducial (nav_msgs/Odometry)
      Pub:
        odometry/filtered_map (nav_msgs/Odometry) [Filtered position in 'map']
      TF:
        map -> odom -> base_link

-->
<launch>
  <arg name="useNavStack" default="true"/>
  <arg name="navStackTopic" default="cmd_vel"/> <!-- Temporary, while figuring stuff out, bad-ish form -->


<!-- Load robot model -->
  <!-- param robot_description -->
  <include file="$(find rovr_description)/launch/description.launch">
  </include>

  <!-- Sub: joint_states (sensor_msgs/JointState) // Note, where is joint_states pub'd??
       Param: robot_description
       Param: tf_prefix (string)
       Pub: tf [tf transform of every link]
  -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
  <!-- Notes: joint_state_publisher is an accumulater of sensor_msgs/JointState msgs, for unfixed joints
       robot_state_publisher converts ^^^ from all joint states into all intra-robot frame tfs
       Wheels (etc) should be published in gazebo? For sensors, need to, for each (ish) publish to
       joint_state_publisher the non-sim values? Check interfacing -->

<!-- Load robot controllers, drivetrain and general --><!-- I think this is really broken -->
  <rosparam file="$(find rovr_control)/config/rovr_control.yaml" command="load"/>

  <!--Load Controllers-->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" ns="/rovr" args="front_left_wheel_position_controller front_right_wheel_position_controller
    back_left_wheel_position_controller back_right_wheel_position_controller joint_state_controller"/>

<!-- Localize -->
  <!-- Launch all localization nodes and configs.
       Runs two EKFs, global and local. See interface.
       Sub: (See configs)
        imu0/data (sensor_msgs/Imu)
        imu1/data (sensor_msgs/Imu)
        odometry/wheel (nav_msgs/Odometry)
        decawave0/odom (nav_msgs/Odometry)
        decawave1/odom (nav_msgs/Odometry)
        odometry/fiducial (nav_msgs/Odometry)
      Pub:
        odometry/filtered (nav_msgs/Odometry)
        odometry/filtered_map (nav_msgs/Odometry)
      TF:
        map -> odom -> base_link
  -->
  <include file="$(find rovr_control)/launch/localization.launch">
  </include>

<!-- Navigate -->
  <group if="$(arg useNavStack)">
    <remap from="cmd_vel" to="$(arg navStackTopic)"/>
    <include file="$(find rovr_navigation)/launch/move_base.launch">
    </include>
  </group>

<!-- Unique functionality -->

</launch>
